#!/usr/bin/env node

/**
 * Setup script for Page Doctor API keys
 * Run with: node setup-api-keys.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const envPath = path.join(__dirname, '.env.local');
const examplePath = path.join(__dirname, '.env.local.example');

async function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
  console.log('\nüîß Page Doctor API Setup\n');
  console.log('This script will help you configure the required API keys for Page Doctor.\n');

  // Check if .env.local exists
  let existingConfig = '';
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ Found existing .env.local file');
    existingConfig = fs.readFileSync(envPath, 'utf8');
  } else {
    console.log('üìù Creating new .env.local file');
    // Copy from example if it exists
    if (fs.existsSync(examplePath)) {
      existingConfig = fs.readFileSync(examplePath, 'utf8');
    }
  }

  console.log('\nüìã Configuration Options:\n');
  console.log('1. Google PageSpeed Insights API Key (RECOMMENDED)');
  console.log('   - Required for detailed audit functionality');
  console.log('   - Get free at: https://developers.google.com/speed/docs/insights/v5/get-started');
  console.log('   - Without this, the app will use basic fallback audits\n');

  console.log('2. OpenAI API Key (OPTIONAL)');
  console.log('   - Enables AI-enhanced analysis and insights');
  console.log('   - Get at: https://platform.openai.com/api-keys');
  console.log('   - Costs ~$0.001-0.005 per analysis\n');

  const setupPageSpeed = await question('Would you like to configure PageSpeed API key? (y/n): ');
  let pageSpeedKey = '';
  
  if (setupPageSpeed.toLowerCase() === 'y') {
    pageSpeedKey = await question('Enter your PageSpeed API key: ');
    if (pageSpeedKey.trim()) {
      console.log('‚úÖ PageSpeed API key configured');
    } else {
      console.log('‚ö†Ô∏è  No key entered - will use fallback mode');
    }
  }

  const setupOpenAI = await question('Would you like to configure OpenAI API key? (y/n): ');
  let openAIKey = '';
  
  if (setupOpenAI.toLowerCase() === 'y') {
    openAIKey = await question('Enter your OpenAI API key: ');
    if (openAIKey.trim()) {
      console.log('‚úÖ OpenAI API key configured');
    } else {
      console.log('‚ö†Ô∏è  No key entered - AI features will be disabled');
    }
  }

  // Build configuration
  let config = `# Page Doctor Configuration
# Generated by setup script on ${new Date().toISOString()}

# Google PageSpeed Insights API Key (RECOMMENDED)
# Get your free API key from: https://developers.google.com/speed/docs/insights/v5/get-started
VITE_PAGESPEED_API_KEY=${pageSpeedKey || 'your_pagespeed_api_key_here'}

# OpenAI Configuration for AI-Enhanced Analytics (OPTIONAL)
# Get your API key from: https://platform.openai.com/api-keys
VITE_OPENAI_API_KEY=${openAIKey || 'your_openai_api_key_here'}

# LLM Settings (recommended defaults)
VITE_LLM_MODEL=gpt-4o-mini
VITE_LLM_MAX_TOKENS=2000
VITE_LLM_TEMPERATURE=0.3

# Optional: Add other API keys when available
# VITE_WEBPAGETEST_API_KEY=your_webpagetest_api_key_here
`;

  // Write configuration
  fs.writeFileSync(envPath, config);
  console.log('\n‚úÖ Configuration saved to .env.local');

  console.log('\nüöÄ Next Steps:');
  console.log('1. Restart your development server: npm run dev');
  console.log('2. Test the audit functionality with a URL like https://google.com');
  
  if (!pageSpeedKey.trim()) {
    console.log('\n‚ö†Ô∏è  Important: Without a PageSpeed API key:');
    console.log('   - Audit results will be limited to basic analysis');
    console.log('   - Some features may not work as expected');
    console.log('   - Consider getting a free API key for full functionality');
  }

  console.log('\nüìñ For troubleshooting, see the README.md file');
  console.log('üîß To run this setup again: node setup-api-keys.js\n');

  rl.close();
}

main().catch(console.error); 